// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0PjfF47PwfbHKRgPD/8JAAD///lnRnOmNgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
